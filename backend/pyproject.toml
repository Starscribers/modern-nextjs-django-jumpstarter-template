[project]
name = "example_project-backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "boto3>=1.38.35",
    "celery>=5.5.3",
    "coverage>=7.9.1",
    "dj-database-url>=3.0.0",
    "django>=5.2.3",
    "django-anymail>=13.0",
    "django-axes>=8.0.0",
    "django-celery-beat>=2.8.1",
    "django-cors-headers>=4.7.0",
    "django-csp>=4.0",
    "django-filter>=25.1",
    "django-solo>=2.4.0",
    "django-storages>=1.14.6",
    "django-stubs>=5.2.0",
    "django-stubs-ext>=5.2.0",
    "djangorestframework>=3.16.0",
    "djangorestframework-camel-case>=1.4.2",
    "djangorestframework-simplejwt>=5.5.0",
    "djangorestframework-stubs>=3.16.0",
    "drf-yasg>=1.21.10",
    "gunicorn>=23.0.0",
    "ipython>=9.3.0",
    "mypy>=1.13.0",
    "orjson>=3.10.18",
    "pandas>=2.3.0",
    "pick>=2.4.0",
    "pillow>=11.2.1",
    "polars>=1.30.0",
    "pre-commit>=4.0.0",
    "psycopg2-binary>=2.9.10",
    "pytest>=8.0.0",
    "pytest-django>=4.8.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.5.0",
    "python-dotenv>=1.1.0",
    "ruff>=0.11.13",
    "sentry-sdk>=2.29.1",
    "termcolor>=3.1.0",
    "types-python-dateutil>=2.9.0",
    "pydantic-settings>=2.10.1",
    "django-rest-passwordreset>=1.5.0",
    "django-simple-captcha>=0.6.2",
    "django-extensions>=4.1",
    "psutil>=7.0.0",
    "django-oauth-toolkit>=3.0.1",
    "django-fsm-2>=4.0.0",
    "pygithub>=2.7.0",
    "pyinstaller>=6.16.0",
    "any-registries>=0.2.0",
    "django-synced-seeders>=0.2.0",
]

# Backend linting and formatting configuration for Ruff
[tool.ruff]
# Same as Black's default line length
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

# Include additional directories
extend-include = ["*.pyi"]

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "*/migrations/*",
]

[tool.ruff.lint]


pylint.max-args = 6

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
    "E4",   # Import errors
    "E7",   # Statement errors
    "E9",   # Runtime errors
    "F",    # Pyflakes
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print
    "DJ",   # flake8-django
    "S",    # flake8-bandit (security)
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore specific rules
ignore = [
    "S101",   # Use of assert detected
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "DJ008",  # Model's __str__ method should return a string
    "B008",   # Do not perform function calls in argument defaults
    "N806",   # Variable in function should be lowercase (Django uses CamelCase)
    "N802",   # Function name should be lowercase
]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and longer lines
"*/tests/*" = ["S101", "S106", "E501"]
"test_*.py" = ["S101", "S106", "E501"]
"tests.py" = ["S101", "S106", "E501"]

# Settings files can have longer lines and imports
"*/settings/*" = ["E501", "F401"]
"settings.py" = ["E501", "F401"]

# Migration files generated by Django
"*/migrations/*" = ["ALL"]

# Admin files often have long lines
"admin.py" = ["E501"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
# Django-specific isort configuration
known-first-party = ["example_project", "core", "users"]
known-third-party = ["django", "rest_framework"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
# Django configuration
python_version = "3.12"
# plugins = ["mypy_django_plugin.main"]  # Temporarily disabled until all deps installed

# Output configuration
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Error strictness - Made less strict for Django compatibility
warn_return_any = false  # Django views often return Any
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Type checking strictness - Relaxed for Django
check_untyped_defs = false  # Don't check untyped defs in Django models
disallow_untyped_defs = false  # Too strict for Django initially
disallow_incomplete_defs = false  # Too strict for Django models
disallow_untyped_decorators = false  # Django decorators often untyped

# Import handling - More permissive
ignore_missing_imports = true  # Ignore missing stubs for third-party packages
follow_imports = "silent"

# Exclude problematic files
exclude = [
    "migrations/",
    "venv/",
    "env/",
    ".venv/",
    "node_modules/",
    "skills/management/commands/import_taxonomy.py",
    "skills/management/commands/import_esco.py",
]

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "celery.*",
    "storages.*",
    "boto3.*",
    "botocore.*",
    "pandas.*",
    "polars.*",
    "sentry_sdk.*",
    "axes.*",
    "solo.*",
    "corsheaders.*",
    "csp.*",
    "anymail.*",
    "django_celery_beat.*",
    "django_filters.*",
    "pick.*",
    "termcolor.*",
    "dotenv.*",
    "dj_database_url.*",
    "drf_yasg.*",
    "rest_framework_simplejwt.*",
    "PIL.*",
]
ignore_missing_imports = true

# Disable type checking for Django model files (handled by ORM)
[[tool.mypy.overrides]]
module = [
    "*.models",
    "users.models",
    "core.models",
]
ignore_errors = true

# Temporarily ignore errors in core modules and command scripts until typed
[[tool.mypy.overrides]]
module = [
    "core.*",
    "example_project.settings",
    "locations.management.*",
    "find_lessons",
    "check_chapters",
    "check_chapter_content",
]
ignore_errors = true

# Ignore i18n assignment errors in inventory items
[[tool.mypy.overrides]]
disable_error_code = ["assignment"]

[tool.django-stubs]
django_settings_module = "example_project.settings"

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "manage.py",
    "*/settings/*",
    "*/tests/*",
    "test_*.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pytest configuration for Django
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "example_project.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
testpaths = [".", "core", "users"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "--cov-fail-under=20",
    "--tb=short",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango60Warning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.black]
line-length = 88
force-exclude = "migrations/"
skip-string-normalization = true

[dependency-groups]
dev = [
    "types-paramiko>=4.0.0.20250822",
    "types-pillow>=10.2.0.20240822",
    "types-psutil>=7.0.0.20250822",
    "types-python-crontab>=3.3.0.20250715",
]
