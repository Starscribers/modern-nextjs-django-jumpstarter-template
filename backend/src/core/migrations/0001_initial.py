# Generated by Django 5.2.5 on 2025-09-22 12:39

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('course_started', 'Course Started'), ('course_completed', 'Course Completed'), ('quiz_attempted', 'Quiz Attempted'), ('skill_tree_enrolled', 'Skill Tree Enrolled'), ('skill_tree_completed', 'Skill Tree Completed'), ('achievement_earned', 'Achievement Earned'), ('profile_updated', 'Profile Updated'), ('content_created', 'Content Created'), ('content_updated', 'Content Updated')], max_length=30)),
                ('description', models.CharField(help_text='Brief description of the activity', max_length=200)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('related_object_type', models.CharField(blank=True, help_text='Type of related object', max_length=50)),
                ('related_object_id', models.UUIDField(blank=True, help_text='ID of related object', null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional activity data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'db_table': 'activity_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for the category', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code for the category', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FixtureRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixture_slug', models.CharField(help_text='Unique identifier for the fixture', max_length=255)),
                ('revision', models.IntegerField(help_text='Version number of the loaded fixture')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fixture Revision',
                'verbose_name_plural': 'Fixture Revisions',
                'db_table': 'django_fixture_manager_revision',
            },
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Descriptive title for the image', max_length=200)),
                ('alt_text', models.CharField(help_text='Alternative text for accessibility', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Optional description of the image')),
                ('original_image', models.ImageField(help_text='Original uploaded image', upload_to='images/originals/')),
                ('optimized_image', models.ImageField(blank=True, help_text='Optimized version of the image', null=True, upload_to='images/optimized/')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail version of the image', null=True, upload_to='images/thumbnails/')),
                ('image_type', models.CharField(choices=[('avatar', 'User Avatar'), ('skill_tree_thumbnail', 'Skill Tree Thumbnail'), ('course_image', 'Course Image'), ('achievement_icon', 'Achievement Icon'), ('general', 'General Image')], default='general', help_text='Type of image for categorization', max_length=20)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('width', models.PositiveIntegerField(blank=True, help_text='Image width in pixels', null=True)),
                ('height', models.PositiveIntegerField(blank=True, help_text='Image height in pixels', null=True)),
                ('file_format', models.CharField(blank=True, help_text='Image file format (JPEG, PNG, etc.)', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the image is active and available for use')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
                'db_table': 'core_images',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('course_completed', 'Course Completed'), ('skill_tree_completed', 'Skill Tree Completed'), ('achievement_earned', 'Achievement Earned'), ('streak_milestone', 'Streak Milestone'), ('new_content', 'New Content Available'), ('reminder', 'Learning Reminder'), ('system', 'System Notification')], default='system', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('action_url', models.URLField(blank=True, help_text='URL to navigate when notification is clicked')),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=50)),
                ('related_object_type', models.CharField(blank=True, help_text='Type of related object (skill_tree, course, etc.)', max_length=50)),
                ('related_object_id', models.UUIDField(blank=True, help_text='ID of related object', null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('send_email', models.BooleanField(default=False)),
                ('send_push', models.BooleanField(default=True)),
                ('send_in_app', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('value_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON')], default='string', max_length=20)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Whether this setting contains sensitive information')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
                'db_table': 'system_configurations',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#6c757d', help_text='Hex color code for the tag', max_length=7)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this tag is featured in listings')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this tag is used')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty_preference', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('mixed', 'Mixed')], default='mixed', help_text='Preferred difficulty level', max_length=15)),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('achievement_notifications', models.BooleanField(default=True)),
                ('reminder_notifications', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('daily_reminder_enabled', models.BooleanField(default=False)),
                ('daily_reminder_time', models.TimeField(blank=True, null=True)),
                ('weekly_summary_enabled', models.BooleanField(default=True)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=10)),
                ('language', models.CharField(default='en', help_text='Preferred language code', max_length=10)),
                ('public_profile', models.BooleanField(default=True)),
                ('show_progress', models.BooleanField(default=True)),
                ('show_achievements', models.BooleanField(default=True)),
                ('analytics_enabled', models.BooleanField(default=True, help_text='Allow collection of learning analytics')),
                ('settings', models.JSONField(default=dict, help_text='Additional user settings in JSON format')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'user_preferences',
            },
        ),
    ]
