# Generated by Django 5.2.5 on 2025-09-22 12:39

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=200)),
                ('user_type', models.CharField(choices=[('learner', 'Learner'), ('provider', 'Provider'), ('admin', 'Admin')], default='learner', help_text='Type of user account', max_length=10)),
                ('bio', models.TextField(blank=True, help_text='User biography', max_length=500)),
                ('date_of_birth', models.DateField(blank=True, help_text='User date of birth', null=True)),
                ('preferred_language', models.CharField(default='en', help_text='User preferred language code', max_length=10)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('public_profile', models.BooleanField(default=True, help_text='Make profile publicly visible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar_image', models.ForeignKey(blank=True, help_text='User profile picture', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_avatars', to='core.imagemodel')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learning_goals', models.TextField(blank=True, help_text='User learning goals and objectives')),
                ('skill_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', help_text='Overall skill level', max_length=20)),
                ('teaching_experience', models.PositiveIntegerField(blank=True, help_text='Years of teaching experience', null=True)),
                ('expertise_areas', models.JSONField(blank=True, default=list, help_text='Areas of expertise (for providers)')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='Professional certifications')),
                ('timezone', models.CharField(default='UTC', help_text='User timezone', max_length=50)),
                ('last_active', models.DateTimeField(blank=True, help_text='Last activity timestamp', null=True)),
                ('total_learning_time', models.DurationField(default=datetime.timedelta(0), help_text='Total time spent learning')),
                ('current_streak', models.PositiveIntegerField(default=0, help_text='Current consecutive days of activity')),
                ('longest_streak', models.PositiveIntegerField(default=0, help_text='Longest streak ever achieved')),
                ('last_activity_date', models.DateField(blank=True, help_text='Date of last recorded activity', null=True)),
                ('streak_start_date', models.DateField(blank=True, help_text='When current streak began', null=True)),
                ('material_slots', models.PositiveIntegerField(default=10, help_text='Maximum material item slots')),
                ('tool_slots', models.PositiveIntegerField(default=10, help_text='Maximum tool item slots')),
                ('consumable_slots', models.PositiveIntegerField(default=10, help_text='Maximum consumable item slots')),
                ('equipment_slots', models.PositiveIntegerField(default=10, help_text='Maximum equipment item slots')),
                ('learning_slots', models.PositiveIntegerField(default=10, help_text='Maximum learning item slots')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('push_notifications', models.BooleanField(default=True, help_text='Receive push notifications')),
                ('course_reminders', models.BooleanField(default=True, help_text='Receive course reminder notifications')),
                ('achievement_notifications', models.BooleanField(default=True, help_text='Receive achievement notifications')),
                ('weekly_progress_emails', models.BooleanField(default=False, help_text='Receive weekly progress summary emails')),
                ('public_profile', models.BooleanField(default=True, help_text='Make profile publicly visible')),
                ('show_progress_publicly', models.BooleanField(default=False, help_text='Show learning progress publicly')),
                ('allow_messages', models.BooleanField(default=True, help_text='Allow other users to send messages')),
                ('daily_goal_minutes', models.PositiveIntegerField(default=30, help_text='Daily learning goal in minutes')),
                ('preferred_difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('mixed', 'Mixed Difficulty')], default='mixed', help_text='Preferred content difficulty', max_length=15)),
                ('auto_continue_courses', models.BooleanField(default=False, help_text='Automatically continue to next course')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('system', 'System')], default='system', help_text='UI theme preference', max_length=10)),
                ('language', models.CharField(default='en', help_text='Preferred language code', max_length=10)),
                ('reduced_motion', models.BooleanField(default=False, help_text='Reduce UI animations and motion')),
                ('content_categories', models.JSONField(blank=True, default=list, help_text='Preferred content categories')),
                ('blocked_tags', models.JSONField(blank=True, default=list, help_text='Blocked content tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings',
                'verbose_name_plural': 'User Settings',
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the activity')),
                ('activity_count', models.PositiveIntegerField(default=0, help_text='Number of activities performed on this date')),
                ('total_learning_time', models.DurationField(default=datetime.timedelta(0), help_text='Total learning time accumulated on this date')),
                ('completed_nodes', models.JSONField(blank=True, default=list, help_text='List of skill node IDs completed on this date')),
                ('completed_quests', models.JSONField(blank=True, default=list, help_text='List of quest IDs completed on this date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity Log',
                'verbose_name_plural': 'User Activity Logs',
                'db_table': 'user_activity_logs',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['user', 'date'], name='user_activi_user_id_ea8c69_idx'), models.Index(fields=['date'], name='user_activi_date_fa7ef4_idx')],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
