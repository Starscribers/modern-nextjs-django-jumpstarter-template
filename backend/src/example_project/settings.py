"""
Django settings for example_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from __future__ import annotations

import os
from datetime import timedelta
from enum import Enum
from pathlib import Path
from urllib.parse import urlparse

from csp.constants import SELF

from core.config import settings

# SENTRY
SENTRY_DSN = settings.SENTRY_DSN
ENVIRONMENT = settings.ENVIRONMENT

# CELERY
CELERY_BROKER_URL = settings.CELERY_BROKER_URL

# Google Cloud Pub/Sub
GOOGLE_CLOUD_PROJECT = settings.GOOGLE_CLOUD_PROJECT
PUBSUB_TOPIC_PREFIX = settings.PUBSUB_TOPIC_PREFIX

# AWS
AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY

# CELERY_SQS
SQS_ENDPOINT_URL = settings.SQS_ENDPOINT_URL

# AWS - S3
AWS_S3_ENDPOINT_URL = settings.S3_ENDPOINT_URL

SECRET_KEY = settings.SECRET_KEY
DEBUG = settings.DEBUG

TRACES_SAMPLE_RATE = float(settings.TRACES_SAMPLE_RATE)
PROFILES_SAMPLE_RATE = float(settings.PROFILES_SAMPLE_RATE)

ALLOWED_HOSTS = ["*"]

BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/aws/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: don't run with debug turned on in production!


SQS_WITH_FIFO = SQS_ENDPOINT_URL and SQS_ENDPOINT_URL.endswith(".fifo")
FIFO_SUFFIX = ".fifo" if SQS_WITH_FIFO else ""

# Use Pub/Sub topic names without FIFO suffix
USE_PUBSUB = bool(GOOGLE_CLOUD_PROJECT)


class QueueName(Enum):
    CELERY = "celery" if USE_PUBSUB else f"celery{FIFO_SUFFIX}"


CELERY_TASK_ROUTES: dict = {}
CELERY_BROKER_TRANSPORT_OPTIONS: dict = {  # type: ignore
    "predefined_queues": {
        QueueName.CELERY.value: {},
    },
}

# Celery broker configuration
CELERY_TASK_DEFAULT_QUEUE = QueueName.CELERY.value

if USE_PUBSUB and GOOGLE_CLOUD_PROJECT:
    # Configure Celery to use Google Cloud Pub/Sub
    CELERY_BROKER_URL = f"gcpubsub://projects/{GOOGLE_CLOUD_PROJECT}"
    CELERY_BROKER_TRANSPORT_OPTIONS = {  # type: ignore
        "location": "global",  # or specify a region like 'us-central1'
        "ack_deadline": 600,  # 10 minutes
        "max_messages": 10,
        "topic_prefix": PUBSUB_TOPIC_PREFIX,
        "subscription_prefix": f"{PUBSUB_TOPIC_PREFIX}-subscription",
        **CELERY_BROKER_TRANSPORT_OPTIONS,
    }
elif SQS_ENDPOINT_URL:
    # Fallback to SQS configuration
    CELERY_BROKER_TRANSPORT_OPTIONS = {  # type: ignore
        "is_secure": True,
        "wait_time_seconds": 1,
        "predefined_queues": {
            QueueName.CELERY.value: {
                "url": SQS_ENDPOINT_URL.format(queue_name="Task-Queue"),
            },
        },
    }
else:
    # Default broker configuration (Redis, RabbitMQ, etc.)
    CELERY_BROKER_TRANSPORT_OPTIONS = {  # type: ignore
        "predefined_queues": {
            QueueName.CELERY.value: {},
        },
    }

CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "baggage",  # for tracing
    "sentry-trace",  # for tracing
]

# Additional CORS settings for development
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins in debug mode
CORS_ALLOW_CREDENTIALS = True
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

CORS_ALLOWED_ORIGINS = [
    settings.HOST_URL,
    settings.FRONTEND_URL,
    # Additional development origins
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CSRF_TRUSTED_ORIGINS = [
    settings.HOST_URL,
    settings.FRONTEND_URL,
    # Additional development origins
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CUSTOM_APPS = [
    "core",
    "users",
]
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_rest_passwordreset",
    "django_celery_beat",
    "storages",
    # login rate limit
    "axes",
    # cors
    "corsheaders",
    "csp",
    # drf
    "rest_framework",
    "django_filters",
    # Django specific
    "drf_yasg",
    "captcha",
    "django_extensions",
    # FSM support
    "django_fsm",
    # custom apps
    *CUSTOM_APPS,
]


EMAIL_BACKEND = "anymail.backends.amazon_ses.EmailBackend"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "djangorestframework_camel_case.middleware.CamelCaseMiddleWare",
    "axes.middleware.AxesMiddleware",
    "csp.middleware.CSPMiddleware",
]

ROOT_URLCONF = "example_project.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path(BASE_DIR) / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "example_project.wsgi.application"
ASGI_APPLICATION = "example_project.asgi.application"

# Channels configuration
if settings.ENABLE_CACHE and "redis" in settings.CACHE_LOCATION.lower():
    # Use Redis if available for caching
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [settings.CACHE_LOCATION],
            },
        },
    }
else:
    # Fall back to in-memory channel layer for development/testing
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": settings.DB_ENGINE,
        "NAME": settings.DB_NAME,
        "USER": settings.DB_USERNAME,
        "PASSWORD": settings.DB_PASSWORD,
        "HOST": settings.DB_HOST,
        "PORT": settings.DB_PORT,
        "TEST": {
            "NAME": f"test_db_{os.getpid()}",  # Unique name per process
        },
    },
}
CELERY_RESULT_BACKEND = (
    settings.CELERY_RESULT_BACKEND
    or f"db+postgresql://{settings.DB_USERNAME}:{settings.DB_PASSWORD}@{settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}"
)

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    "axes.backends.AxesStandaloneBackend",
    # Django ModelBackend is the default authentication backend.
    "django.contrib.auth.backends.ModelBackend",
]

render_classes = ["djangorestframework_camel_case.render.CamelCaseJSONRenderer"]
if settings.DEBUG:
    render_classes.append("rest_framework.renderers.BrowsableAPIRenderer")

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "core.backends.generic_exception_handler",
    "DEFAULT_RENDERER_CLASSES": (*render_classes,),
    "DEFAULT_PARSER_CLASSES": (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
        # Any other parsers
    ),
    "DEFAULT_FILTER_BACKENDS": [
        # 'django_filters.rest_framework.DjangoFilterBackend',
        "core.backends.CustomDjangoFilterBackend",
        "core.backends.SortingFilter",
        "core.backends.CustomSearchFilter",
    ],
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "core.backends.PageSizePageNumberPagination",
}

SWAGGER_SETTINGS = {
    "LOGIN_URL": "rest_framework:login",
    "LOGOUT_URL": "rest_framework:logout",
    "DEFAULT_INFO": "example_project.urls.api_info",
    "USE_SESSION_AUTH": True,
}

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    {
        "NAME": "core.validators.CustomPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.User"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Taipei"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = Path(BASE_DIR) / "static"
STATIC_URL = "/static/"
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(weeks=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(weeks=4),
    "ROTATE_REFRESH_TOKENS": True,
}
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = timedelta(minutes=10)
AXES_LOCKOUT_PARAMETERS = ["username"]
SILENCED_SYSTEM_CHECKS = ["axes.W003"]

TEST_RUNNER = "redgreenunittest.django.runner.RedGreenDiscoverRunner"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {},
    "formatters": {
        "standard": {
            "format": "[%(asctime)s, %(msecs)d: %(levelname)s] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "verbose": {
            "format": "[%(asctime)s, %(msecs)d: %(levelname)s, %(module)s, %(process)d, %(thread)d] %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
            "formatter": "standard",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "default": {
            "handlers": ["console", "file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

if settings.COLORLOG:
    LOGGING["formatters"]["color"] = {  # type: ignore  # noqa: PGH003
        "()": "colorlog.ColoredFormatter",
        "format": "[%(asctime)s, %(msecs)d: %(levelname)s] %(message)s",
        "datefmt": "%Y-%m-%d %H:%M:%S",
        "log_colors": {
            "DEBUG": "cyan",
            "INFO": "green",
            "WARNING": "yellow",
            "ERROR": "red",
            "CRITICAL": "bold_red",
        },
    }
    LOGGING["handlers"]["console"]["formatter"] = "color"  # type: ignore  # noqa: PGH003


broker_transport_options = {
    "endpoint_url": SQS_ENDPOINT_URL or CELERY_BROKER_URL,
}

FILESTORE_BUCKET_NAME = settings.FILESTORE_BUCKET_NAME
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": FILESTORE_BUCKET_NAME,
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

APPEND_SLASH = True

if SENTRY_DSN:

    def filter_transactions(event: dict, hint: dict) -> dict | None:
        try:
            url_string = event["request"]["url"]
            parsed_url = urlparse(url_string)
            if "healthcheck" in parsed_url.path:
                return None

        except KeyError:
            pass

        try:
            if "chord_unlock" in event["transaction"]:
                return None
        except KeyError:
            pass

        return event

    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=ENVIRONMENT,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(propagate_traces=False, monitor_beat_tasks=True),
        ],
        before_send_transaction=filter_transactions,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=TRACES_SAMPLE_RATE,
        profiles_sample_rate=PROFILES_SAMPLE_RATE,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

# Content Security Policy Settings
CONTENT_SECURITY_POLICY = {
    "EXCLUDE_URL_PREFIXES": ["/devutils/console"],
    "DIRECTIVES": {
        "default-src": [SELF],
        "script-src": [SELF, "'unsafe-inline'"],
        "style-src": [SELF, "'unsafe-inline'"],
    },
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js development server
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite development server
    "http://127.0.0.1:5173",
]

# Allow credentials for OAuth flows
CORS_ALLOW_CREDENTIALS = True

# Allow all headers for OAuth
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Allow specific methods
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

if settings.ENABLE_CACHE:
    CACHES = {
        "default": {
            "BACKEND": settings.CACHE_BACKEND,
            "LOCATION": settings.CACHE_LOCATION,
        },
    }
else:
    # Fallback to database cache for OAuth and other features that require caching
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "oauth_cache_table",
        },
    }
